#!/bin/bash
# Script to promote surfarch configurations to global defaults
# This will move surfarch's configs to global and remove device-specific ones that are identical

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$SCRIPT_DIR/config"
GLOBAL_DIR="$CONFIG_DIR/global"
DEVICES_DIR="$CONFIG_DIR/devices"
SURFARCH_DIR="$DEVICES_DIR/surfarch"

# Check if we're in the right directory
if [[ ! -d "$CONFIG_DIR" ]]; then
    echo -e "${RED}Error: config directory not found!${NC}"
    echo "Expected location: $CONFIG_DIR"
    echo "Please run this script from the setup_script directory"
    exit 1
fi

echo -e "${BLUE}Promote Surfarch Configs to Global${NC}"
echo "===================================="
echo

# List of configs to process
declare -A configs=(
    ["bashrc"]="bashrc.global"
    ["bash_profile"]="bash_profile.global"
    ["profile"]="profile.global"
    ["kitty.conf"]="kitty.conf.global"
    ["picom.conf"]="picom.conf.global"
    ["xinitrc"]="xinitrc.global"
    ["vimrc"]="vimrc.global"
    ["i3/config"]="i3/config.global"
    ["i3status/config"]="i3status/config.global"
)

# Files to skip (not needed in global)
skip_files=("device.conf")

echo -e "${BLUE}Current surfarch configurations:${NC}"
echo "--------------------------------"
for config in "${!configs[@]}"; do
    if [[ -f "$SURFARCH_DIR/$config" ]]; then
        echo -e "  ${GREEN}✓${NC} $config"
    else
        echo -e "  ${YELLOW}✗${NC} $config (not found)"
    fi
done
echo

# Ask for confirmation
read -p "Promote these surfarch configs to global defaults? [y/N] " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Operation cancelled${NC}"
    exit 0
fi

echo
echo -e "${BLUE}Processing configurations...${NC}"
echo

# Process each configuration
for config in "${!configs[@]}"; do
    global_name="${configs[$config]}"
    surfarch_file="$SURFARCH_DIR/$config"
    global_file="$GLOBAL_DIR/$global_name"
    
    # Create directory structure if needed
    global_dir=$(dirname "$global_file")
    if [[ ! -d "$global_dir" ]]; then
        mkdir -p "$global_dir"
        echo -e "  ${BLUE}→ Created directory: $(basename "$global_dir")${NC}"
    fi
    
    if [[ -f "$surfarch_file" ]]; then
        # Check if global file exists and is different
        if [[ -f "$global_file" ]]; then
            if ! diff -q "$surfarch_file" "$global_file" >/dev/null 2>&1; then
                # Files are different, backup the global
                backup_file="${global_file}.backup.$(date +%Y%m%d_%H%M%S)"
                cp "$global_file" "$backup_file"
                echo -e "  ${YELLOW}→ Backed up existing $global_name${NC}"
            fi
        fi
        
        # Copy surfarch config to global
        cp "$surfarch_file" "$global_file"
        echo -e "  ${GREEN}✓ Promoted $config → $global_name${NC}"
        
        # Check other devices for identical configs
        for device in legacy thinkarch; do
            device_file="$DEVICES_DIR/$device/$config"
            if [[ -f "$device_file" ]]; then
                if diff -q "$surfarch_file" "$device_file" >/dev/null 2>&1; then
                    # Files are identical, remove device-specific
                    rm "$device_file"
                    echo -e "    ${PURPLE}→ Removed identical $device/$config${NC}"
                else
                    echo -e "    ${YELLOW}! Kept different $device/$config${NC}"
                fi
            fi
        done
        
        # Remove surfarch config if it's now in global
        if [[ -f "$global_file" ]]; then
            rm "$surfarch_file"
            echo -e "    ${PURPLE}→ Removed $config from surfarch (now global)${NC}"
        fi
    else
        echo -e "  ${YELLOW}✗ Skipped $config (not found in surfarch)${NC}"
    fi
done

echo
echo -e "${BLUE}Cleaning up empty directories...${NC}"

# Remove empty i3blocks directories if they exist
for device in surfarch legacy thinkarch; do
    i3blocks_dir="$DEVICES_DIR/$device/i3blocks"
    if [[ -d "$i3blocks_dir" ]] && [[ -z "$(ls -A "$i3blocks_dir")" ]]; then
        rmdir "$i3blocks_dir"
        echo -e "  ${PURPLE}→ Removed empty $device/i3blocks directory${NC}"
    fi
done

# Also check global i3blocks
if [[ -d "$GLOBAL_DIR/i3blocks" ]] && [[ -z "$(ls -A "$GLOBAL_DIR/i3blocks")" ]]; then
    rmdir "$GLOBAL_DIR/i3blocks"
    echo -e "  ${PURPLE}→ Removed empty global/i3blocks directory${NC}"
fi

# Clean up any other empty subdirectories
for device_dir in "$DEVICES_DIR"/*; do
    if [[ -d "$device_dir" ]]; then
        # Remove empty subdirectories (like i3/, etc)
        find "$device_dir" -type d -empty -delete 2>/dev/null || true
    fi
done

echo
echo -e "${GREEN}✓ Configuration promotion complete!${NC}"
echo

# Show summary
echo -e "${BLUE}Summary of changes:${NC}"
echo "==================="
echo
echo -e "${GREEN}Global configs created/updated:${NC}"
for config in "${!configs[@]}"; do
    global_name="${configs[$config]}"
    if [[ -f "$GLOBAL_DIR/$global_name" ]]; then
        echo "  ✓ $global_name"
    fi
done

echo
echo -e "${PURPLE}Device-specific configs status:${NC}"
for device in surfarch legacy thinkarch; do
    echo -e "\n  ${BLUE}$device:${NC}"
    remaining_configs=$(find "$DEVICES_DIR/$device" -type f -name "*" ! -name "device.conf" 2>/dev/null | wc -l)
    if [[ $remaining_configs -eq 0 ]]; then
        echo "    ✓ Only device.conf remains (all configs moved to global)"
    else
        echo "    ! $remaining_configs config(s) remain device-specific:"
        find "$DEVICES_DIR/$device" -type f ! -name "device.conf" -exec basename {} \; 2>/dev/null | sed 's/^/      - /'
    fi
done

echo
echo -e "${YELLOW}Notes:${NC}"
echo "• Surfarch configs are now the global defaults"
echo "• Device-specific configs only remain where they differ from global"
echo "• Empty i3blocks directories have been removed"
echo "• The setup script will use global configs when device-specific ones don't exist"

echo
echo -e "${BLUE}Next steps:${NC}"
echo "1. Test the setup with: ./setup.sh --device [device] --dry-run"
echo "2. Commit these changes to git"
echo "3. All devices will now use the same base configuration"
